#include <x_view_core/features/graph.h>
#include <x_view_core/matchers/graph_matcher/random_walker.h>

#ifndef X_VIEW_TEST_RANDOM_WALK_H
#define X_VIEW_TEST_RANDOM_WALK_H

namespace x_view_test {

/**
 * \brief Tests the transition probability matrix generated by the
 * RandomWalker class. The transition probability matrix is tested by
 * counting how many non-zero elements it contains and on the non-zero
 * elements values.
 * \param random_walker RandomWalker instance to be tested.
 * \param graph Graph to be tested.
 * \param params Parameters to be used by the RandomWalker class to generate
 * the transition probability matrix.
 */
void testTransitionProbabilityMatrix(const x_view::RandomWalker& random_walker,
                                     const x_view::Graph::GraphType& graph,
                                     const x_view::RandomWalkerParams& params);

/**
 * \brief Tests the validity of the random walks generated by the
 * RandomWalker class by checking if an edge exists between each consecutive
 * pair of vertices contained in the random walk.
 * \param random_walker RandomWalker instance to be tested.
 * \param graph Graph to be tested.
 * \param params Parameters to be used by the RandomWalker class to generate
 * the random walks.
 */
void testRandomWalkSequence(const x_view::RandomWalker& random_walker,
                            const x_view::Graph::GraphType& graph,
                            const x_view::RandomWalkerParams& params);

/**
 * \brief Tests the avoiding strategy, i.e. it verifies that two consecutive
 * nodes in a random walk never have equal label except for the case when a
 * node has only neighbors with same label.
 * \param random_walker RandomWalker instance to be tested.
 * \param graph Graph to be tested.
 * \param params Parameters to be used by the RandomWalker class to generate
 * the random walks.
 */
void testAvoidingStrategy(const x_view::RandomWalker& random_walker,
                          const x_view::Graph::GraphType& graph,
                          const x_view::RandomWalkerParams& params);

/**
 * \brief Tests if the random walks generated by the RandomWalker instance
 * visit all 1-ring neighbors of the source vertex.
 * \param random_walker RandomWalker instance to be tested.
 * \param graph Graph to be tested.
 * \param params Parameters to be used by the RandomWalker class to generate
 * the random walks.
 */
void testVisitingNeighbors(const x_view::RandomWalker& random_walker,
                           const x_view::Graph::GraphType& graph,
                           const x_view::RandomWalkerParams& params);

/**
 * \brief Tests if the i-th and the j-th vertex of the graph passed as
 * parameter are linked by an edge.
 * \param i Index of the first vertex.
 * \param j Index of the second vertex.
 * \param graph Graph containing the two vertices passed as argument.
 * \return True if an edge exists between vertex i and vertex j, false
 * otherwise.
 */
bool areVerticesConnected(const int i, const int j,
                          const x_view::Graph::GraphType& graph);

}

#endif //X_VIEW_TEST_RANDOM_WALK_H
