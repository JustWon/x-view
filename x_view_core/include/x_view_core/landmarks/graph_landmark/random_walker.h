#ifndef X_VIEW_RANDOM_WALKER_H
#define X_VIEW_RANDOM_WALKER_H


// FIXME: this header and the corresponding source file must be moved into the matcher folder as they work together with the GraphMatcher class.

#include <x_view_core/features/graph.h>

#include <Eigen/Sparse>

#include <vector>

#ifdef X_VIEW_DEBUG
#define DEFAULT_NUM_RANDOM_WALKS 10
#define DEFAULT_RANDOM_WALK_LENGTH 2
#else
#define DEFAULT_NUM_RANDOM_WALKS 100
#define DEFAULT_RANDOM_WALK_LENGTH 3
#endif

namespace x_view {

/**
 * \brief Parameters used by the RandomWalk class.
 */
struct RandomWalkerParams {
  /// \brief Random walks can be either performed in a complete random way
  /// (i.e. by randomly sampling neighbors around each node belonging to the
  /// random walk) or using other techniques.
  enum class RANDOM_SAMPLING_TYPE {
    UNIFORM = 0  /// \brief true random walk.
  };

  /**
   * \brief Default random walk parameters.
   */
  RandomWalkerParams()
      : random_sampling_type_(RANDOM_SAMPLING_TYPE::UNIFORM),
        num_walks_(DEFAULT_NUM_RANDOM_WALKS),
        walk_length_(DEFAULT_RANDOM_WALK_LENGTH) {
  }

  /// \brief Determines the type of random walk to be generated.
  RANDOM_SAMPLING_TYPE random_sampling_type_;
  /// \brief Number or random walks to generate for each node in the graph.
  int num_walks_;
  /// \brief Random walk length (i.e. number of steps taken for each walk
  /// starting from the source node).
  int walk_length_;
};

/**
 * \brief Class responsible for generating random walks on a graph.
 */
class RandomWalker {

 public:

  /// \brief A random walk is defined by the sequence of semantic labels
  /// encountered during the random walk.
  typedef std::vector<int> Walk;
  /// \brief Container for multiple random walks.
  typedef std::vector<Walk> Walks;
  /// \brief A sparse representation of transition probabilities between each
  /// node in the graph graph_.
  typedef Eigen::SparseMatrix<float> TransitionProbMatrix;

  /**
   * \brief Constructor of random walk object.
   * \param graph The random walks computed by this object are generated by
   * randomly iterating over the graph passed as argument.
   * \param params Parameters to be used by the RandomWalker class to
   * generate random walks.
   */
  RandomWalker(const Graph::GraphType& graph,
               const RandomWalkerParams& params = RandomWalkerParams());

  /**
   * \brief Access to the transition probability matrix.
   * \return A const reference to the transition probability matrix computed
   * for the graph passed to the constructor of this object.
   */
  const TransitionProbMatrix& getTransitionProbabilityMatrix() const {
    return transition_probabilities_;
  }

 protected:

  /**
   * \brief Precomputation of transition probabilities between each neighbor
   * node in the graph graph_
   */
  void precomputeTransitionProbabilities();

  /**
   * \brief Generated num_walks random walks of length walk_length for each
   * node contained in the graph graph_.
   * \param num_walks Number of random walks to generate starting from each
   * node.
   * \param walk_length Length (steps) of each random walk.
   */
  void generateRandomWalks(const int num_walks, const int walk_length);

  const Graph::GraphType& graph_;

  const RandomWalkerParams params_;

  TransitionProbMatrix transition_probabilities_;

};

}

#undef DEFAULT_NUM_RANDOM_WALKS
#undef DEFAULT_RANDOM_WALK_LENGTH

#endif //X_VIEW_RANDOM_WALKER_H
