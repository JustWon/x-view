#ifndef X_VIEW_RANDOM_WALKER_H
#define X_VIEW_RANDOM_WALKER_H

#include <x_view_core/features/graph.h>

#include <Eigen/Sparse>

#include <vector>

namespace x_view {

class RandomWalker {

 public:

  /// \brief A random walk is defined by the sequence of semantic labels
  /// encountered during the random walk.
  typedef std::vector<int> Walk;
  /// \brief Container for multiple random walks.
  typedef std::vector<Walk> Walks;
  /// \brief A sparse representation of transition probabilities between each
  /// node in the graph graph_.
  typedef Eigen::SparseMatrix<float> TransitionProbMatrix;

  /**
   * \brief Constructor of random walk object.
   * \param graph The random walks computed by this object are generated by
   * randomly iterating over the graph passed as argument.
   */
  RandomWalker(const Graph::GraphType& graph);

  /**
   * \brief Access to the transition probability matrix.
   * \return A const reference to the transition probability matrix computed
   * for the graph passed to the constructor of this object.
   */
  const TransitionProbMatrix& getTransitionProbabilityMatrix() const {
    return transition_probabilities_;
  }

 protected:

  /**
   * \brief Precomputation of transition probabilities between each neighbor
   * node in the graph graph_
   */
  void precomputeTransitionProbabilities();


  /**
   * \brief Generated num_walks random walks of length walk_length for each
   * node contained in the graph graph_.
   * \param num_walks Number of random walks to generate starting from each
   * node.
   * \param walk_length Length (steps) of each random walk.
   */
  void generateRandomWalks(const int num_walks, const int walk_length);

  const Graph::GraphType& graph_;

  TransitionProbMatrix transition_probabilities_;

};

}

#endif //X_VIEW_RANDOM_WALKER_H
